local pb     = require "pb"
local protoc = require "protoc"

local types = 0
for _ in pb.types() do
  types = types + 1
end

  -- load schema from text
  local txt = [[
      syntax = 'proto3'; //指定版本信息

      package addressbook; //package声明符

      message Person //message为关键字，作用为定义一种消息类型
      {
         string name = 1;    //姓名
         int32 id = 2;       //id
         string email = 3; //邮件
         enum PhoneType //枚举消息类型
         {
            MOBILE = 0; //proto3版本中，首成员必须为0，成员不应有相同的值
            HOME = 1;
            WORK = 2;
         }
         message PhoneNumber
         {
            string number = 1;
            PhoneType type = 2;
         }

         repeated PhoneNumber phones = 4; //phones为数组
      }
      message AddressBook
      {
         repeated Person people = 1;
      } ]]

  local addressbookstring = txt

  protoc:load(addressbookstring)

  local testbook = {
    name = 'Hank',
    id = 10,
    email = 'aaabbb@gmail.com',
    phones = {
      {number = '456789', type = 'HOME'},
      {number = '000112', type = 'WORK'}
    }
  }

  local bytetest = assert(pb.encode('addressbook.Person', testbook))
  --上面這行報錯unknown type
--[[
  local addressData = assert(pb.decode('addressbook.Person', bytetest))

  print('Name = ' .. addressData.name)
  print('ID = ' .. addressData.id)
  print('Email  = ' .. addressData.email)
  print('PhoneNumber.number = ' .. addressData.phones[1].number)
  print('PhoneNumber.type = ' .. addressData.phones[1].type)
  for name in pb.fields('addressbook.Person.PhoneNumber') do
    print(name)
  end
--]]